import { format as formatDate } from 'date-fns';
import PO from 'pofile';
import type { input } from 'zod';
import type { Formatter } from '~/shapes.js';

export function createFormatter() {
  return {
    extension: '.po',

    parse(content, context) {
      const po = PO.parse(content);

      if (!po.headers['X-Generator']?.startsWith('sayable'))
        throw new Error('PO file was not generated by sayable');
      if (po.headers.Language !== context.locale)
        throw new Error('PO file locale does not match the expected locale');

      const messages: ReturnType<input<typeof Formatter>['parse']> = {};
      for (const item of po.items) {
        messages[item.extractedComments[0]!] = {
          message: item.msgid,
          translation: item.msgstr[0],
          comments: item.comments,
          references: item.references as never,
        };
      }
      return messages;
    },

    stringify(messages, context) {
      const po = context.previousContent
        ? PO.parse(context.previousContent)
        : new PO();

      // Remove empty headers
      for (const key in po.headers)
        if (!po.headers[key]) delete po.headers[key];
      po.items = [];

      po.headers['POT-Creation-Date'] ||= //
        formatDate(new Date(), 'yyyy-MM-dd HH:mmxxxx');
      po.headers['Content-Type'] ||= 'text/plain; charset=UTF-8';
      po.headers['Content-Transfer-Encoding'] ||= '8bit';
      po.headers.Language = context.locale;
      po.headers['X-Generator'] = 'sayable';

      for (const [id, message] of Object.entries(messages)) {
        const item = new PO.Item();
        item.msgid = message.message;
        item.msgstr = [message.translation ?? ''];
        item.comments = message.comments ?? [];
        item.references = message.references ?? [];
        item.extractedComments = [id];
        po.items.push(item);
      }

      return po.toString();
    },
  } satisfies input<typeof Formatter>;
}

export default createFormatter;
